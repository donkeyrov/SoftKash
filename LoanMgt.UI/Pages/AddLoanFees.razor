@page "/addloanfees"
@page "/addloanfees/{feeId:int}"
@inject IToastService toastService
@inject IJSRuntime JSRuntime
@inject NavigationManager UriHelper
@inject TransactionCodeRepository tranCodeRepo;
@inherits OwningComponentBase<FeeRepository>

<h3>Add Loan Fees</h3>

<div class="admin-link">
    <NavLink href="/loanfees">Back to Fees</NavLink>
</div>

<div class="blue-top new-border">
    <EditForm Model="fee" OnValidSubmit="@Process">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="row col-lg-12 col-md-12">
            <div class="col-lg-4 col-md-4 text-right"
                 014">
                <labe5l>Name</labe5l>
            </div>
            <div class="col-lg-8 col-md-8">
                <InputText @bind-Value="fee.Name" placeholder="Fee Name" id="feename" name="feename" class="form-control" />
            </div>
        </div>
        <br />
        <div class="gray new-border2">
            <p>If you select fixed amount, then you will need to enter exact value of loan fee when you add a loan. But, if you select percentage % based, loan fee will be calculated as a percentage of the principal and/or interest amount of the loan.</p>
        </div>
        <br />
        <div class="row col-lg-12 col-md-12">
            <div class="col-lg-4 col-md-4 text-right">
                <label>Fee Calculation</label>
            </div>
            <div class="col-lg-8 col-md-8">
                <div class="row pace-sm">
                    <SfRadioButton TChecked="string" Label="I want Fee to be a fixed amount" Name="feetype" Value="Fixed"  @bind-Checked="sFixed"></SfRadioButton>
                </div>
                <div class="row pace-sm">
                    <SfRadioButton TChecked="string" Label="I want Fee to be percentage % based" Name="feetype" Value="Percentage" @bind-Checked="sFixed"></SfRadioButton>
                </div>
                <div class="row pace-sm">
                    <InputNumber @bind-Value="fee.Amount" placeholder="Fee Value" id="feevalue" name="feevalue" class="form-control" />
                </div>
            </div>
        </div>                
        <br/>
        <div class="row col-lg-12 col-md-12">
            <div class="col-lg-4 col-md-4 text-right">
                <label>Fee Type</label>
            </div>
            <div class="col-lg-8 col-md-8">
                <div class="row pace-sm">
                    <SfRadioButton TChecked="string" Label="Capitalized Fee Type" Name="feecategory" Value="Capitalized" @bind-Checked="capitalized"></SfRadioButton>
                </div>
                <div class="row pace-sm">
                    <SfRadioButton TChecked="string" Label="Monthly Fee Type" Name="feecategory" Value="Monthly" @bind-Checked="capitalized"></SfRadioButton>
                </div>
            </div>
        </div>
        <div class="row col-lg-12 col-md-12">
            <div class="col-lg-4 col-md-4 text-right">
                <label>Recurring Monthly</label>
            </div>
            <div class="col-lg-8 col-md-8">                
                <div class="row pace-sm">
                    <InputCheckbox @bind-Value="fee.Recurring" id="monthlyrecurring" name="monthlyrecurring" class="form-control" />
                </div>
            </div>
        </div>
        <br />
        <div class="row col-lg-12 col-md-12">
            <div class="col-lg-4 col-md-4 text-right">
                <label>Calculate Fee percentage % of</label>
            </div>
            <div class="col-lg-8 col-md-8">
                <div class="row pace-sm">
                    <SfRadioButton TChecked="string" Label="Total Loan Due Principal Amount" Name="applyHoliday" Value="Principal" @bind-Checked="principal"></SfRadioButton>
                </div>
                <div class="row pace-sm">
                    <SfRadioButton TChecked="string" Label="Total Loan Due Interest Amount" Name="applyHoliday" Value="Interest" @bind-Checked="principal"></SfRadioButton>
                </div>
                <div class="row pace-sm">
                    <SfRadioButton TChecked="string" Label="Total Loan Due Principal and Interest Amount" Name="applyHoliday" Value="PrincipalInterest" @bind-Checked="principal"></SfRadioButton>
                </div>
            </div>
        </div>
        <br />
        <div class="gray new-border2">
            <p>Deductable Fees is a fee that is deducted from the principal amount of the loan. For example if you give a loan for 1000 and the deductable fee is 100, the fee would be deducted from 1000 and remaining amount of 900 would be given to borrower. But the borrower still has to pay back the 1000. These fees are not added on top of the loan. If you want the fee to be charged on top of the loan, do not check the below box.</p>
        </div>
        <br />
        <div class="row col-lg-12 col-md-12">
            <div class="col-lg-4 col-md-4 text-right">
                <label>Deductable Fees</label>
            </div>
            <div class="col-lg-8 col-md-8">
                <SfCheckBox Label="Deduct Fee from Principal Amount?" @bind-Checked="fee.DeductFromPrincipalAmount"></SfCheckBox>
            </div>
        </div>
         <br />
        <div class="row col-lg-12 col-md-12">
            <div class="col-lg-4 col-md-4 text-right">
                <label>Transaction Code</label>
            </div>
            <div class="col-lg-8 col-md-8">
                <InputSelectNumber @bind-Value="fee.TransactionCodeId" placeholder="Country Code" id="countrycode" name="countrycode" class="form-control">
                    <option value="0">--- select ---</option>
                    @foreach (var item in transactionCodes)
                        {
                        <option value="@item.TransactionCodeId">@item.Description</option>
                        }
                </InputSelectNumber>
            </div>
        </div>

        <hr />
        <div class="text-right pace-md">
            <button type="submit" class="btn btn-info">Submit</button>
        </div>
    </EditForm>
</div>

@code {
    [Parameter]
    public int feeId { get; set; } = 0;    
    private LoanMgt.SHARED.Fee fee = new LoanMgt.SHARED.Fee();
    private List<SHARED.TransactionCode> transactionCodes = new List<SHARED.TransactionCode>(); 
    private string sFixed = "Fixed";
    private string capitalized = "Capitalized";
    private string principal = "Principal";

    protected override void OnInitialized()
    {
        if (feeId > 0)
        {
            fee = Service.Get(feeId);

            if(fee.Fixedamount == true)
            {
                sFixed = "Fixed";
            }
            else
            {
                sFixed = "Percentage";
            }

            if(fee.Capitalized == true)
            {
                capitalized = "Capitalized";
            }
            else
            {
                capitalized = "Monthly";
            }

            if(fee.CalculateOnDuePrincipalAmount == true)
            {
                principal = "Principal";                
            }
            else if (fee.CalculateOnDueInterestamount == true)
            {
                principal = "Interest";                
            }
            else if(fee.CalculateOnDuePricipalAndInterest == true)
            {
                principal = "PrincipalInterest";                
            }
        }
        else
        {
            fee = new SHARED.Fee();
        }

        transactionCodes = tranCodeRepo.GetAll().ToList();
    }

    protected void Process()
    {
        if(sFixed == "Fixed")
        {
            fee.Fixedamount = true;
            fee.PercentageBased = false;
        }
        else
        {
            fee.Fixedamount = false;
            fee.PercentageBased = true;
        }

        if(capitalized == "Capitalized")
        {
            fee.Capitalized = true;
            fee.Monthly = false;
        }
        else
        {
            fee.Capitalized = false;
            fee.Monthly = true;
        }

        if(principal == "Principal")
        {
            fee.CalculateOnDuePrincipalAmount = true;
            fee.CalculateOnDueInterestamount = false;
            fee.CalculateOnDuePricipalAndInterest = false;
        }
        else if (principal == "Interest")
        {
            fee.CalculateOnDuePrincipalAmount = false;
            fee.CalculateOnDueInterestamount = true;
            fee.CalculateOnDuePricipalAndInterest = false;
        }
        else
        {
            fee.CalculateOnDuePrincipalAmount = false;
            fee.CalculateOnDueInterestamount = false;
            fee.CalculateOnDuePricipalAndInterest = true;
        }

        fee.CreatedDate = DateTime.Now;
        fee.CreatedBy = "user";

        if (fee.FeeId == 0)
        {
            Service.Add(fee);
            toastService.ShowSuccess("Loan Fee has been created", "System Information");
        }
        else
        {
            Service.Update(fee);
            toastService.ShowSuccess("Loan Fee has been updated", "System Information");
        }

        
        UriHelper.NavigateTo("/loanfees");
    }

}