@page "/bulkrepayments" 
@using System.Text.RegularExpressions

@inject IToastService toastService
@inject IJSRuntime JSRuntime
@inject NavigationManager UriHelper
@inject LoanProductRepository loanProductRepo;
@inject BorrowerRepository borrowerRepo;
@inject TransactionTempRepository tranRepo;
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager
@inject FileUpload fileUpload;
@inherits OwningComponentBase<LoanRepository>

<h3>Bulk Repayments</h3>

<SfUploader AllowedExtensions=".csv, .txt" AutoUpload="false">
    <UploaderEvents ValueChange="OnChange"></UploaderEvents>
</SfUploader>

<div class="col-lg-12 control-section">
    <h3>Successful Transactions</h3>
    <div class="content-wrapper">
        <div class="row">
            <SfGrid DataSource="@transactionTemps" Toolbar="@(new List<string>() { "Search" })" AllowPaging="true">
                <GridColumns>
                    <GridColumn Field=@nameof(transactionTemp.TransactionDate) HeaderText="Date"></GridColumn>
                    <GridColumn Field=@nameof(transactionTemp.Nrc) HeaderText="NRC" TextAlign="TextAlign.Left" ></GridColumn>
                    <GridColumn Field=@nameof(transactionTemp.ManNo) HeaderText="Man No." TextAlign="TextAlign.Left" ></GridColumn>
                    <GridColumn Field=@nameof(transactionTemp.EmployeeNo) HeaderText="Employee No."></GridColumn>
                    <GridColumn Field=@nameof(transactionTemp.Name) HeaderText="Name"></GridColumn>
                    <GridColumn Field=@nameof(transactionTemp.Description) HeaderText="Description"></GridColumn>
                    <GridColumn Field=@nameof(transactionTemp.Amount) HeaderText="Amount"></GridColumn>
                    <GridColumn Field=@nameof(transactionTemp.Period) HeaderText="Accounting Period"></GridColumn>                        
                </GridColumns>
            </SfGrid>
        </div>
    </div>
</div>
<div class="col-lg-12 control-section">
    <h3>Failed Transactions</h3>
    <div class="content-wrapper">
        <div class="row">
            <SfGrid DataSource="@errorTemps" Toolbar="@(new List<string>() { "Search" })" AllowPaging="true">                
                <GridColumns>
                    <GridColumn Field=@nameof(transactionTemp.TransactionDate) HeaderText="Date"></GridColumn>
                    <GridColumn Field=@nameof(transactionTemp.Nrc) HeaderText="NRC" TextAlign="TextAlign.Left" ></GridColumn>
                    <GridColumn Field=@nameof(transactionTemp.ManNo) HeaderText="Man No." TextAlign="TextAlign.Left" ></GridColumn>
                    <GridColumn Field=@nameof(transactionTemp.EmployeeNo) HeaderText="Employee No."></GridColumn>
                    <GridColumn Field=@nameof(transactionTemp.Name) HeaderText="Name"></GridColumn>
                    <GridColumn Field=@nameof(transactionTemp.Description) HeaderText="Description"></GridColumn>
                    <GridColumn Field=@nameof(transactionTemp.Amount) HeaderText="Amount"></GridColumn>
                    <GridColumn Field=@nameof(transactionTemp.Period) HeaderText="Accounting Period"></GridColumn>                        
                </GridColumns>
            </SfGrid>
        </div>
    </div>
</div>

@code {
    string name = string.Empty;
    string userID = string.Empty;
    List<SHARED.TransactionTemp> transactionTemps = new List<SHARED.TransactionTemp>();
    List<SHARED.TransactionTemp> errorTemps = new List<SHARED.TransactionTemp>();
    SHARED.TransactionTemp transactionTemp;

    protected async override Task OnInitializedAsync()
    {
        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var user = authstate.User;
        name = user.Identity.Name;
        userID = UserManager.GetUserId(user);


    }

    private void OnChange(UploadChangeEventArgs args)
    {
        foreach (var file in args.Files)
        {
            //var path = @"Uploads/" + file.FileInfo.Name;
            string fileName = $"{file.FileInfo.Name}";
            var path = Path.Combine(fileUpload.GetWebRootPath(), "wwwroot\\Uploads", fileName);

            //check if file exisits
            if(File.Exists(path))
            {
                toastService.ShowError($"File '{file.FileInfo.Name}' has already been uploaded, process terminating", "System Information");
                //return;
            }

            FileStream filestream = new FileStream(path, FileMode.Create, FileAccess.Write);
            file.Stream.WriteTo(filestream);
            filestream.Close();
            file.Stream.Close();

            int counter = 0;
            Regex rx = new Regex(@"\d{6}/\d{2}/\d{1}", RegexOptions.Compiled | RegexOptions.IgnoreCase);

            //read uploaded file
            StreamReader sr = new StreamReader(path);
            while(sr.Peek() != -1)
            {
                counter++;
                string line = sr.ReadLine();

                if(line.StartsWith("|Pers."))
                {
                    counter = 98;
                }
                else if(line.StartsWith("|Personnel"))
                {
                    counter = 0;
                }

                if(counter >= 100)
                {
                    //process the input line
                    string[] arLine = line.Split(" ");
                    string manNo = string.Empty;
                    string EmployeeNo = string.Empty;
                    string nrc = string.Empty;
                    string amount = string.Empty;
                    string period = string.Empty;

                    foreach (var item in arLine)
                    {
                        if(!string.IsNullOrEmpty(item))
                        {
                            double outValue = 0;

                            if (amount == string.Empty  && !string.IsNullOrEmpty(period))
                            {
                                if (double.TryParse(item, out outValue))
                                {
                                    amount = item;
                                    break;
                                }

                            }

                            if(period == string.Empty && !string.IsNullOrEmpty(nrc))
                            {
                                period = item;
                            }

                            if(nrc == string.Empty && !string.IsNullOrEmpty(manNo))
                            {
                                if (rx.IsMatch(item))
                                    nrc = item;
                            }

                            if(manNo == string.Empty && !string.IsNullOrEmpty(EmployeeNo))
                            {                                
                                if (double.TryParse(item, out outValue))
                                    manNo = item;
                            }

                            if (EmployeeNo == string.Empty)
                            {
                                if (double.TryParse(item, out outValue))
                                    EmployeeNo = item;

                            }                            

                        }
                    }//end foreach

                    //get borrower on nrc
                    var borrower = borrowerRepo.GetAll().Where(b => b.NRC == nrc).FirstOrDefault();

                    if (borrower != null && !string.IsNullOrEmpty(nrc))
                    {
                        //post to transactions temp
                        SHARED.TransactionTemp temp = new SHARED.TransactionTemp()
                            {
                                TransactionDate = DateTime.Now,
                                Approved = false,
                                Amount = float.Parse(amount),
                                EmployeeNo = EmployeeNo,
                                ManNo = manNo,
                                Description = "Loan Repayment",
                                ApprovedBy = "",
                                Nrc = nrc,
                                Period = period,
                                UploadDate = DateTime.Now,
                                UploadedBy = name,
                                Posted = false,
                                Name = $"{borrower.Firstname} {borrower.Lastname}"
                            };

                        transactionTemps.Add(temp);
                    }
                    else if (borrower == null && !string.IsNullOrEmpty(nrc))
                    {
                        SHARED.TransactionTemp temp = new SHARED.TransactionTemp()
                            {
                                TransactionDate = DateTime.Now,
                                Approved = false,
                                Amount = float.Parse(amount),
                                EmployeeNo = EmployeeNo,
                                ManNo = manNo,
                                Description = "Loan Repayment",
                                ApprovedBy = "",
                                Nrc = nrc,
                                Period = period,
                                UploadDate = DateTime.Now,
                                UploadedBy = name,
                                Posted = false,
                                Name = $"Borrower not found"
                            };

                        errorTemps.Add(temp);
                    }
                    StateHasChanged();
                }
            }//end while

            tranRepo.AddRange(transactionTemps);
            tranRepo.AddRange(errorTemps);

            toastService.ShowSuccess("Completed Processing Transactions!", "System Information");
        }
    }
}
