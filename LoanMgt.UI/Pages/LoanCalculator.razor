@page "/loancalculator" 
@inject IToastService toastService
@inject IJSRuntime JSRuntime
@inject NavigationManager UriHelper
@inject BranchRepository branchRepo;
@inject InterestMethodRepository interestMethodRepo;
@inject LoanInterestPeriodRepository loanInterestPeriodRepo;
@inject LoanDurationRepository loanDurationRepo;
@inject RepaymentCycleRpository repaymentCycleRepo;
@inject LoanProductRepository loanProductRepo;
@inject LoanFeeRepository loanFeeRepo;
@inject BorrowerRepository BorrowerRepo;
@inherits OwningComponentBase<LoanRepository>
@using Microsoft.VisualBasic;

<h3>Loan Calculator</h3>

<div class="admin-link">
    <NavLink href="/viewallloans">Back to View Loans</NavLink>
</div>
<div class="new-border3 blue-top">
    <EditForm Model="loan" OnValidSubmit="@Process">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="gray new-border2">
            <b>Required Field:</b>
        </div>
        <div class="row col-lg-12 col-md-12 pace-md">
            <div class="col-lg-2 col-md-2">
                <label for="loanProductName">Loan Product</label>
            </div>
            <div class="col-lg-3 col-md-3">
                <Select placeholder="Loan Product" id="loanProductName" name="loanProductName" class="form-control" onchange=@OnValueChanged  >
                    <option value="0">-- select --</option>
                    @foreach (var item in loanProducts)
                    {
                        <option value="@item.LoanProductId">@item.Name </option>
                    }
                </Select>                
            </div>
        </div>
        
        @*<div class="row col-lg-12 col-md-12 pace-md">
            <div class="col-lg-4 col-md-4">
                <label for="borrower">Borrower</label>
            </div>
            <div class="col-lg-8 col-md-8">
                <InputSelectNumber @bind-Value="loan.BorrowerId" placeholder="Select Borrower" id="borrower" name="borrower" class="form-control">
                    <option value="0">-- select --</option>
                    @foreach (var item in borrowers)
                    {
                        <option value="@item.BorrowerId">@item.NRC - @item.Firstname @item.Lastname </option>
                    }
                </InputSelectNumber>                
            </div>
        </div>*@

        <div class="row col-lg-12 col-md-12 pace-md">
            <div class="col-lg-2 col-md-2">
                <label for="loanno">Loan Amount</label>
            </div>
            <div class="col-lg-3 col-md-3">
                <InputNumber @bind-Value="loanAmount" placeholder="Loan Amount" id="loanno" name="loanno" class="form-control" />                                 
            </div>
        </div>
        <div class="row col-lg-8 col-md-8 text-right pace-md">
            <button type="submit" class="btn btn-info" >Calculate</button>
        </div>
        </EditForm>
        <br/>
        <div class="gray new-border2">
            <b>Loan Terms :</b>
        </div>
        <hr/>
        <br/>
     
        <div class="col-lg-12 control-section" style="overflow-x:scroll;">
            <div class="content-wrapper" >
                <div class="row">
                    <SfGrid DataSource="@calcLoans" Toolbar="@(new List<string>() { "ExcelExport","PdfExport","CsvExport","Search" })" AllowExcelExport=true >
                        <GridColumns>
                            <GridColumn Field=@nameof(loan.Capital) HeaderText="Capital" AutoFit=true ></GridColumn>                    
                            <GridColumn Field=@nameof(loan.OriginationFee) HeaderText="Origination Fee" AutoFit=true ></GridColumn>                    
                            <GridColumn Field=@nameof(loan.Insurance1) HeaderText="Insurance" AutoFit=true ></GridColumn>                    
                            <GridColumn Field=@nameof(loan.LegislativeFee) HeaderText="Legislative Fee" AutoFit=true ></GridColumn>                    
                            <GridColumn Field=@nameof(loan.StampDuty) HeaderText="Stamp Duty" AutoFit=true ></GridColumn>                    
                            <GridColumn Field=@nameof(loan.Levy) HeaderText="Levy" AutoFit=true ></GridColumn>                    
                            <GridColumn Field=@nameof(loan.CreditBureauFee) HeaderText="Credit Bureau Fee" AutoFit=true ></GridColumn>                    
                            <GridColumn Field=@nameof(loan.CapitalizedTotal) HeaderText="Total Capitalized Amt" AutoFit=true ></GridColumn>                    
                            <GridColumn Field=@nameof(loan.InterimInterest) HeaderText="Interim Interest" AutoFit=true ></GridColumn>                    
                            <GridColumn Field=@nameof(loan.InterestBearingCapital) HeaderText="Interest Bearing Capital" AutoFit=true ></GridColumn>                    
                            <GridColumn Field=@nameof(loan.ServiceFee) HeaderText="Service/Admin Fee" AutoFit=true ></GridColumn>                    
                            <GridColumn Field=@nameof(loan.CollectionFee) HeaderText="Collection Fee" AutoFit=true ></GridColumn>                    
                            <GridColumn Field=@nameof(loan.Insurance2) HeaderText="Insurance" AutoFit=true ></GridColumn>                    
                            <GridColumn Field=@nameof(loan.MonthlyFee) HeaderText="Monthly Levy" AutoFit=true ></GridColumn>                    
                            <GridColumn Field=@nameof(loan.MonthlyInstallment) HeaderText="Monthly Installment" AutoFit=true ></GridColumn>                    
                            <GridColumn Field=@nameof(loan.TotalDue) HeaderText="Total Due" AutoFit=true ></GridColumn>                    
                            <GridColumn Field=@nameof(loan.EffectivePA) HeaderText="Effective PA" AutoFit=true ></GridColumn>                    
                            <GridColumn Field=@nameof(loan.TotalReturn) HeaderText="Total Return" AutoFit=true ></GridColumn>                    
                            <GridColumn Field=@nameof(loan.TotalReturnPA) HeaderText="Total Return PA" AutoFit=true ></GridColumn>                    
                        </GridColumns>
                    </SfGrid>
                </div>
            </div>
        </div>
       
</div>

@code {
    [Parameter]
    public int loanId { get; set; } = 0;        
    private int loanProductID;
    private float loanAmount = 0;    
    private LoanMgt.SHARED.LoanProduct loanProduct = new LoanMgt.SHARED.LoanProduct();
    private LoanMgt.SHARED.LoanTemp loan = new LoanMgt.SHARED.LoanTemp();
    public List<LoanMgt.SHARED.LoanTemp> calcLoans;     
    public IEnumerable<LoanMgt.SHARED.LoanInterestPeriod> loanInterestPeriods;     
    public IEnumerable<LoanMgt.SHARED.LoanDuration> loanDurations;
    public IEnumerable<LoanMgt.SHARED.RepaymentCycle> repaymentCycles;
    public IEnumerable<LoanMgt.SHARED.LoanProduct> loanProducts;
    public IEnumerable<LoanMgt.SHARED.Borrower> borrowers;
    private List<SHARED.LoanFee> loanFees = new List<SHARED.LoanFee>();

    protected override void OnInitialized()
    {         
        loanInterestPeriods = loanInterestPeriodRepo.GetAll();
        loanDurations = loanDurationRepo.GetAll();
        repaymentCycles = repaymentCycleRepo.GetAll();
        loanProducts = loanProductRepo.GetAll();
        borrowers = BorrowerRepo.GetAll();
    }

    protected void Process()
    {
        //TODO calcu/late loa terms forration of loan
        int duration = loanProduct.MaximumNumberOfRepayments;
        float step = loanProduct.Step;
        float min = loanProduct.MinimumPrincipalAmount;
        float max = loanProduct.MaximumPrincipalAmount;
        calcLoans = new List<SHARED.LoanTemp>();

        for(float lAmount = min; lAmount <= max; lAmount+=step)
        {
            loan = new LoanMgt.SHARED.LoanTemp()
                {
                    LoanRate = loanProduct.DefaultLoanInterestRate,
                    NumberOfMonths = loanProduct.DefaultNumberOfRePayments,
                    Capital = (float)Math.Round(lAmount,2)
                };

            float capitalizedFee = 0;

            foreach (var item in loanFees.Where(f => f.Fee.Capitalized == true).ToList() )
            {
                float value = 0;
                if (item.Fee.Fixedamount)
                {
                    value = item.Fee.Amount;
                }
                else
                {
                    value = (item.Fee.Amount / 100) * lAmount;
                }
                capitalizedFee += (float)Math.Round(value,2);

                if(item.Fee.Name.Contains("origination",StringComparison.CurrentCultureIgnoreCase))
                {
                    loan.OriginationFee = (float)Math.Round(value,2);
                }
                else if(item.Fee.Name.Contains("insurance",StringComparison.CurrentCultureIgnoreCase) && item.Fee.Amount > 0)
                {
                    loan.Insurance1 = (float)Math.Round(value,2);
                }
                else if(item.Fee.Name.Contains("legislative",StringComparison.CurrentCultureIgnoreCase))
                {
                    loan.LegislativeFee = (float)Math.Round(value,2);
                }
                else if(item.Fee.Name.Contains("stamp",StringComparison.CurrentCultureIgnoreCase))
                {
                    loan.StampDuty = (float)Math.Round(value,2);
                }
                else if(item.Fee.Name.Contains("levy",StringComparison.CurrentCultureIgnoreCase))
                {
                    loan.Levy = (float)Math.Round(value,2);
                }
                else if(item.Fee.Name.Contains("credit",StringComparison.CurrentCultureIgnoreCase))
                {
                    loan.CreditBureauFee = (float)Math.Round(value,2);
                }
            }

            float totalCapitalized = capitalizedFee + lAmount;
            loan.CapitalizedTotal = (float)Math.Round(totalCapitalized,2);                            

            float interimInterest = (totalCapitalized * loanProduct.InterimInterest * 12 * loanProduct.DefaultLoanDuration)/36500;
            loan.InterimInterest = (float)Math.Round(interimInterest,2);

            float interestBearingCapital = interimInterest + totalCapitalized;
            loan.InterestBearingCapital = (float)Math.Round(interestBearingCapital,2);

            float monthlyFee = 0;

            foreach (var item in loanFees.Where(f => f.Fee.Monthly == true).ToList() )
            {
                float value = 0;
                if (item.Fee.Fixedamount)
                {
                    value = item.Fee.Amount;
                }
                else
                {
                    value = (item.Fee.Amount / 100) * lAmount;
                }
                monthlyFee += (float)Math.Round(value,2);

                if(item.Fee.Name.Contains("service",StringComparison.CurrentCultureIgnoreCase))
                {
                    loan.ServiceFee = (float)Math.Round(value,2);
                }
                else if(item.Fee.Name.Contains("insurance",StringComparison.CurrentCultureIgnoreCase) && item.Fee.Amount == 0)
                {
                    loan.Insurance2 = (float)Math.Round(value,2);
                }
                else if(item.Fee.Name.Contains("collection",StringComparison.CurrentCultureIgnoreCase))
                {
                    loan.CollectionFee = (float)Math.Round(value,2);
                }
                else if(item.Fee.Name.Contains("monthly",StringComparison.CurrentCultureIgnoreCase))
                {
                    loan.MonthlyFee = (float)Math.Round(value,2);
                }               
            }

            double rate = Financial.Pmt(loanProduct.DefaultLoanInterestRate/100,(double)loan.NumberOfMonths, interestBearingCapital * -1) + monthlyFee;
            loan.MonthlyInstallment = (float)Math.Round(rate,2);
            loan.TotalDue = (float)Math.Round(loan.MonthlyInstallment * loan.NumberOfMonths,2);
            double lValue = double.Parse(lAmount.ToString());
            try
            {
                loan.EffectivePA = (float)Math.Round(Financial.Rate((double)duration, (double)rate * -1, lValue, 0) * 12 * 100,1);
            }
            catch
            { 
                loan.EffectivePA = 0;
            }
            loan.TotalReturn = (float)Math.Round(((loan.TotalDue - loan.Capital) / loan.Capital * 100),1);
            loan.TotalReturnPA = (float)Math.Round(((loan.TotalReturn * 12) / loan.NumberOfMonths),1);

            calcLoans.Add(loan);
        }

        //toastService.ShowSuccess("Loan has been created", "System Information");        
    }

    void OnValueChanged(ChangeEventArgs e)
    {
        loanProductID = int.Parse(e.Value.ToString());
        loanProduct = loanProductRepo.Get(loanProductID);

        loanFees = loanFeeRepo.GetAll2().Where(f => f.LoanId == loanProduct.LoanProductId).ToList();
    }

    
}
