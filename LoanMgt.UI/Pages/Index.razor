@layout LogonLayout;
@page "/"
@using Microsoft.AspNetCore.Identity
@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject IToastService toastService
@inject IJSRuntime JSRuntime
@inject NavigationManager UriHelper
@inject InterestMethodRepository interestMethodRepo;
@inject LoanInterestPeriodRepository loanInterestPeriodRepo;
@inject LoanDurationRepository loanDurationRepo;
@inject RepaymentCycleRpository repaymentCycleRepo;
@inject LoanFeeRepository loanFeeRepo;
@inherits OwningComponentBase<LoanProductRepository>
@using Microsoft.VisualBasic;
@using System;
@using System.Collections.Generic;
@using System.ComponentModel.DataAnnotations;
@using System.Linq;
@using System.Threading.Tasks;
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Authentication;

@using Microsoft.AspNetCore.Identity.UI.Services;
@using Microsoft.AspNetCore.Mvc;
@using Microsoft.AspNetCore.Mvc.RazorPages;
@using Microsoft.Extensions.Logging;


<style>
    body {
        background: #4169e1;
        height: 100%;
    }
    .login-form {
        width: 340px;
        margin: 100px auto;
        font-size: 15px;
    }
    .login-form form {
        margin-bottom: 15px;
        background: #ffffff;
        box-shadow: 0px 0px 2px rgba(0, 0, 0, 0.3);
        padding: 30px;
    }
    .form-control, .btn {
        min-height: 38px;
        border-radius: 2px;
    }
    .btn {
        font-size: 15px;
        font-weight: bold;
        color: #fff;
        background-color: #1b6ec2;
        border-color: #1861ac;
    }
    .login-form .title {
        font-size: 20px;
        font-weight: 700;
        font-family: verdana;
    }
    .container{
        display:flex;
        height:100%;
        margin-top:70px;
    }
    .container .left{
        width:50%;
        height: 100%;
        color:#FFF;
        padding:30px 30px 30px 30px;
        pargin-rght:25px;
    }
    .container .right 
    {
        width:50%;
        min-height:500px;
        border-radius:10px;
        height: 100%;
        background-color:#FFF;
        padding:30px 30px 30px 30px;
    }
</style>

<div class="text-right fixed-top">
    <img src="/images/final logo.png" style="position:absolute;top:5px;left:5px;width:250px;height:80px;filter:drop-shadow(30px 10px 4 #FFFFFF); "/>
    <button @onclick="btnClicked" class="btn btn-lg btn-secondary" style="margin-top:10px;margin-right:10px;" >Member Login</button>
</div>

<div class="container">
    <div class="left">
        Loan Application Requirements
        <div class="pace-lg">
            <ol>
                <li>It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters</li>
                <li>There are many variations of passages of Lorem Ipsum available, but the majority have suffered alteration in some form, by injected humour</li>
                <li>Contrary to popular belief, Lore  m Ipsum is not simply random text. It has roots in a piece of classical Latin literature from 45 BC, making it over 2000 years old</li>
                <li>The standard chunk of Lorem Ipsum used since the 1500s is reproduced below for those interested.</li>
                <li>Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s</li>
                <li>Various versions have evolved over the years, sometimes by accident, sometimes on purpose (injected humour and the like).</li>
            </ol>
        </div>
        <div class="flex-fill pace-lg" style="color:#FFFFFF;text-decoration:none;position:relative;margin-bottom:0px;">
            Download Application Forms <a href="/Downloads/Application Forms.pdf" target="_blank" style="color:#FFFFFF;text-decoration:none;"><b>Here</b></a>
        </div>
    </div>
    <div class="right">
        <div><b>Loan Estimator</b></div>
        <hr/>
        <div>
            <EditForm Model="loan" OnValidSubmit="@Process">
                <div class="row col-lg-12 col-md-12 pace-md">
                    <div class="col-lg-3 col-md-3">
                        <label for="loanno">Loan Amount</label>
                    </div>
                    <div class="col-lg-9 col-md-9">
                        <InputNumber @bind-Value="loanAmount" placeholder="Loan Amount" id="loanno" name="loanno" class="form-control corners" />                                 
                    </div>
                </div>
                <div class="row col-lg-12 col-md-12 pace-md">
                    <div class="col-lg-3 col-md-3">
                        <label for="loanProductName">Loan Product</label>
                    </div>                    
                    <div class="col-lg-9 col-md-9">
                        <Select placeholder="Loan Product" id="loanProductName" name="loanProductName" class="form-control corners" onchange=@OnValueChanged  >
                            <option value="0">-- select --</option>
                            @foreach (var item in loanProducts)
                            {
                                <option value="@item.LoanProductId">@item.Name </option>
                                <option disabled class="superscript">&nbsp;&nbsp;&nbsp;&nbsp; @item.LoanScheduleDescription</option>
                            }
                        </Select>                
                    </div>
                </div>

                
                <div class="text-right pace-md" style="width:100%;">
                    <button type="submit" class="btn btn-info pull-right" style="border-radius:5px;" >Calculate</button>
                </div>
                <div style="margin-top:50px;">
                    @if(processing)
                    {
                        <div class="row">
                          <div class="loader">
                              <img src="/images/loadingimage.gif">
                          </div>
                        </div>
                    }
                    @if (result)
                    {
                        <div><b>Loan Estimator</b></div>
                        <hr/>
                        <div>
                            <p style="margin:20px 10px;">Your loan period will be @loanPeriod</p>
                            <p style="margin:20px 10px;">Your monthly repayment amount will be ZMW @monthlyAmount</p>
                            <p style="margin:20px 10px;">Your toal loan amount will be ZMW @loanTotal</p>
                        </div>
                    }
                </div>
            </EditForm>
        </div>
    </div>
</div>

@if(processing)
{
<div class="flex flex-fill">
      <div class="loader" >
          <img src="/images/loadingimage.gif" style="max-width:150px;max-height:150px;" />
      </div>
  </div>
}
@code
{
    SHARED.User user = new SHARED.User();
    private bool processing = false;   
    private int loanProductID;
    private float loanAmount = 0;    
    private float monthlyAmount = 0;    
    private float loanPeriod = 0;
    private float loanTotal = 0;
    private bool result = false;
    private LoanMgt.SHARED.LoanProduct loanProduct = new LoanMgt.SHARED.LoanProduct();
    private LoanMgt.SHARED.LoanTemp loan = new LoanMgt.SHARED.LoanTemp();
    public List<LoanMgt.SHARED.LoanTemp> calcLoans;     
    public IEnumerable<LoanMgt.SHARED.LoanInterestPeriod> loanInterestPeriods;     
    public IEnumerable<LoanMgt.SHARED.LoanDuration> loanDurations;
    public IEnumerable<LoanMgt.SHARED.RepaymentCycle> repaymentCycles;
    public IEnumerable<LoanMgt.SHARED.LoanProduct> loanProducts;
    public IEnumerable<LoanMgt.SHARED.Borrower> borrowers;
    private List<SHARED.LoanFee> loanFees = new List<SHARED.LoanFee>();

    protected override async void OnInitialized()
    {
        processing = true;
        StateHasChanged();

        loanProducts = Service.GetAll();
        loanInterestPeriods = loanInterestPeriodRepo.GetAll();
        loanDurations = loanDurationRepo.GetAll();
        repaymentCycles = repaymentCycleRepo.GetAll();

        processing = false;
        StateHasChanged();
    }

    private void btnClicked()
    {
        UriHelper.NavigateTo("/Identity/Account/Login",true);
    }

    protected void Process()
    {
        if(loanAmount <= 0)
        {
            toastService.ShowInfo("Loan Amount must be greater zero!","System Information");
            return;
        }
        processing = true;
        StateHasChanged();

        //TODO calcu/late loa terms forration of loan
        int duration = loanProduct.MaximumNumberOfRepayments;
        loanPeriod = duration;
        float step = loanProduct.Step;
        float min = loanAmount;
        float max = loanAmount;
        calcLoans = new List<SHARED.LoanTemp>();

        for(float lAmount = min; lAmount <= max; lAmount+=step)
        {
            loan = new LoanMgt.SHARED.LoanTemp()
                {
                    LoanRate = loanProduct.DefaultLoanInterestRate,
                    NumberOfMonths = loanProduct.DefaultNumberOfRePayments,
                    Capital = (float)Math.Round(lAmount,2)
                };

            float capitalizedFee = 0;

            foreach (var item in loanFees.Where(f => f.Fee.Capitalized == true).ToList() )
            {
                float value = 0;
                if (item.Fee.Fixedamount)
                {
                    value = item.Fee.Amount;
                }
                else
                {
                    value = (item.Fee.Amount / 100) * lAmount;
                }
                capitalizedFee += (float)Math.Round(value,2);

                if(item.Fee.Name.Contains("origination",StringComparison.CurrentCultureIgnoreCase))
                {
                    loan.OriginationFee = (float)Math.Round(value,2);
                }
                else if(item.Fee.Name.Contains("insurance",StringComparison.CurrentCultureIgnoreCase) && item.Fee.Amount > 0)
                {
                    loan.Insurance1 = (float)Math.Round(value,2);
                }
                else if(item.Fee.Name.Contains("legislative",StringComparison.CurrentCultureIgnoreCase))
                {
                    loan.LegislativeFee = (float)Math.Round(value,2);
                }
                else if(item.Fee.Name.Contains("stamp",StringComparison.CurrentCultureIgnoreCase))
                {
                    loan.StampDuty = (float)Math.Round(value,2);
                }
                else if(item.Fee.Name.Contains("levy",StringComparison.CurrentCultureIgnoreCase))
                {
                    loan.Levy = (float)Math.Round(value,2);
                }
                else if(item.Fee.Name.Contains("credit",StringComparison.CurrentCultureIgnoreCase))
                {
                    loan.CreditBureauFee = (float)Math.Round(value,2);
                }
            }

            float totalCapitalized = capitalizedFee + lAmount;
            loan.CapitalizedTotal = (float)Math.Round(totalCapitalized,2);                            

            float interimInterest = (totalCapitalized * loanProduct.InterimInterest * 12 * loanProduct.DefaultLoanDuration)/36500;
            loan.InterimInterest = (float)Math.Round(interimInterest,2);

            float interestBearingCapital = interimInterest + totalCapitalized;
            loan.InterestBearingCapital = (float)Math.Round(interestBearingCapital,2);

            float monthlyFee = 0;

            foreach (var item in loanFees.Where(f => f.Fee.Monthly == true).ToList() )
            {
                float value = 0;
                if (item.Fee.Fixedamount)
                {
                    value = item.Fee.Amount;
                }
                else
                {
                    value = (item.Fee.Amount / 100) * lAmount;
                }
                monthlyFee += (float)Math.Round(value,2);

                if(item.Fee.Name.Contains("service",StringComparison.CurrentCultureIgnoreCase))
                {
                    loan.ServiceFee = (float)Math.Round(value,2);
                }
                else if(item.Fee.Name.Contains("insurance",StringComparison.CurrentCultureIgnoreCase) && item.Fee.Amount == 0)
                {
                    loan.Insurance2 = (float)Math.Round(value,2);
                }
                else if(item.Fee.Name.Contains("collection",StringComparison.CurrentCultureIgnoreCase))
                {
                    loan.CollectionFee = (float)Math.Round(value,2);
                }
                else if(item.Fee.Name.Contains("monthly",StringComparison.CurrentCultureIgnoreCase))
                {
                    loan.MonthlyFee = (float)Math.Round(value,2);
                }               
            }

            double rate = Financial.Pmt(loanProduct.DefaultLoanInterestRate/100,(double)loan.NumberOfMonths, interestBearingCapital * -1) + monthlyFee;
            loan.MonthlyInstallment = (float)Math.Round(rate,2);
            monthlyAmount = loan.MonthlyInstallment;

            loan.TotalDue = (float)Math.Round(loan.MonthlyInstallment * loan.NumberOfMonths,2);
            loanTotal = loan.TotalDue;

            double lValue = double.Parse(lAmount.ToString());
            try
            {
                loan.EffectivePA = (float)Math.Round(Financial.Rate((double)duration, (double)rate * -1, lValue, 0) * 12 * 100,1);
            }
            catch
            { 
                loan.EffectivePA = 0;
            }
            loan.TotalReturn = (float)Math.Round(((loan.TotalDue - loan.Capital) / loan.Capital * 100),1);
            loan.TotalReturnPA = (float)Math.Round(((loan.TotalReturn * 12) / loan.NumberOfMonths),1);

            calcLoans.Add(loan);

            processing = false;
            StateHasChanged();

            //show results of loan calculation
            result = true;
        }

        //toastService.ShowSuccess("Loan has been created", "System Information");        
    }

    void OnValueChanged(ChangeEventArgs e)
    {
        result = false;
        loanProductID = int.Parse(e.Value.ToString());

        if (loanProductID == 0)
            return;

        loanProduct = Service.Get(loanProductID);

        loanFees = loanFeeRepo.GetAll2().Where(f => f.LoanId == loanProduct.LoanProductId).ToList();

        if(loanAmount <= 0)
        {
            toastService.ShowInfo("Loan Amount must be greater zero!","System Information");
            return;
        }

        
    }
}

